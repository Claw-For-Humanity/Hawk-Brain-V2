<?xml version="1.0" ?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="mycobot_320pi">
	<!-- 
		xml: 	
			Declare this file as an XML document and specifies the XML version.
		robot: 	
			The root element 'robot' defines a robot model. Everything about the 
			robot configuration will be nested inside this element.
		xmlns:xacro:	
			Declares the XML namespace for xacro, which is a XML macro language used 
			in ROS (Robot Operating System) for parameterizing XML documents.
		name: 
			Specify the name of the robot.
	-->
	
	<!-- Reference Files: https://github.com/elephantrobotics/mycobot_ros/ -->
	
	<!-- Provide a global reference frame for the robotic arm in simulation (Gazebo) 
		or visualization (RViz) environments
	-->
	<link name="world"/>

	<!-- ****************** ROBOT CONSTANTS *******************************  -->
	<!-- Source: https://www.elephantrobotics.com/en/mycobot280-for-arduino-specifications-en/ -->
	<!-- Numbers are estimated when necessary -->
	<xacro:property name="effort" value="5.0"/> <!-- TODO: effort is 1000.00?? -->
	<xacro:property name="velocity" value="2.792527"/>
	
	<!-- ********** LINKS ********** -->

    <!-- Define the base plate of the robotic arm 
    	The inertial values below were taken from link1 (with slight modification. 
		They are just placeholder values. -->
	<link name="base">
		<inertial>
			<origin xyz="0 0 0.0" rpy="0 0 0"/>
			<mass value="0.33"/>
			<inertia
				ixx="0.000784" ixy="0.0" ixz="0.0"
				iyy="0.000867" iyz="0.0"
				izz="0.001598"/>
		</inertial>
		<visual>
			<geometry>
				<mesh filename="/home/cfh/Desktop/ClawForHumanity/hos-resolve/install/mycobot_description/share/mycobot_description/urdf/mycobot_320_pi_2022/base.dae"/>
			</geometry>
			<origin xyz = "0.0 0 0 " rpy = " 0 0 1.5708"/>
		</visual>
		<collision>
			<origin xyz = "0.0 0 0 " rpy = " 0 0 1.5708"/>
			<geometry>
				<cylinder length="0.102" radius="0.0725"/>
			</geometry>
		</collision>
	</link>

	<!--Define the first link of the robotic arm. Each link represents a solid part of the robot.--> 
	<link name="link1">
		<inertial>
			<origin xyz="0 0 0.0" rpy="0 0 0"/>
			<mass value="0.12"/>
			<inertia
				ixx="0.000148" ixy="0.0" ixz="0.0"
				iyy="0.000148" iyz="0.0"
				izz="0.000096"/>
		</inertial>
		<visual>
			<geometry>
				<mesh filename="/home/cfh/Desktop/ClawForHumanity/hos-resolve/install/mycobot_description/share/mycobot_description/urdf/mycobot_320_pi_2022/link1.dae"/>
			</geometry>
			<origin xyz = "0.0 0.0 -0.078 " rpy = " 0 0 1.5708"/>
		</visual>
		<collision>
			<origin xyz = "0.0 0.0 -0.078 " rpy = " 0 0 1.5708"/>
			<geometry>
				<cylinder length="0.106" radius="0.043"/>
			</geometry>
		</collision>
	</link>
	
	<!-- Define the second link of the robotic arm, and so on.-->
	<link name="link2">
		<inertial>
			<origin xyz="0 0 0.0" rpy="0 0 0"/>
			<mass value="0.19"/>
			<inertia
				ixx="0.000148" ixy="0.0" ixz="0.0"
				iyy="0.000148" iyz="0.0"
				izz="0.000096"/>
		</inertial>
		<visual>
			<geometry>
				<mesh filename="/home/cfh/Desktop/ClawForHumanity/hos-resolve/install/mycobot_description/share/mycobot_description/urdf/mycobot_320_pi_2022/link2.dae"/>
			</geometry>
			<origin xyz = "0.0 0.0 -0.04 " rpy = " 0 1.5708 0"/>
		</visual>
		<collision>
			<origin xyz = "0.0 0.0 -0.04 " rpy = " 0 1.5708 0"/>
			<geometry>
				<cylinder length="0.18" radius="0.036"/>
			</geometry>
		</collision>
	</link>

	<link name="link3">
		<inertial>
			<origin xyz="0 0 0.0" rpy="0 0 0"/>
		  	<mass value="0.16"/>
			<inertia
			  ixx="0.000148" ixy="0.0" ixz="0.0"
			  iyy="0.000148" iyz="0.0"
			  izz="0.000096"/>
		</inertial>
		<visual>
      		<geometry>
        		<mesh filename="/home/cfh/Desktop/ClawForHumanity/hos-resolve/install/mycobot_description/share/mycobot_description/urdf/mycobot_320_pi_2022/link3.dae"/>
      		</geometry>
     		<origin xyz = "0.0 0.0 0.039 " rpy = " 1.5708 1.5708 1.5708"/>
    	</visual>
    	<collision>
      		<origin xyz = "0.0 0.0 0.039 " rpy = " 1.5708 1.5708 1.5708"/>
      		<geometry>
        		<cylinder length="0.14" radius="0.0305"/>
      		</geometry>
    	</collision>
	</link>

	<link name="link4">
		<inertial>
		  	<origin xyz="0 0 0.0" rpy="0 0 0"/>
			<mass value="0.124"/>
			<inertia
			  	ixx="0.000103" ixy="0.0" ixz="0.0"
			  	iyy="0.000103" iyz="0.0"
			  	izz="0.000096"/>
		</inertial>
		<visual>
			<geometry>
				<mesh filename="/home/cfh/Desktop/ClawForHumanity/hos-resolve/install/mycobot_description/share/mycobot_description/urdf/mycobot_320_pi_2022/link4.dae"/>
			</geometry>
			<origin xyz = "0.0 -0.0024 -0.05" rpy = " 1.5708 1.5708 0"/>
		</visual>
		<collision>
			<origin xyz = "0.0 -0.0024 -0.05" rpy = " 1.5708 1.5708 0"/>
			<geometry>
				<cylinder length="0.083" radius="0.029"/>
			</geometry>
		</collision>
	</link>

	<link name="link5">
		<inertial>
			<origin xyz="0 0 0.0" rpy="0 0 0"/>
		  	<mass value="0.11"/>
			<inertia
			  ixx="0.000103" ixy="0.0" ixz="0.0"
			  iyy="0.000103" iyz="0.0"
			  izz="0.000096"/>
		</inertial>
		<visual>
			<geometry>
				<mesh filename="/home/cfh/Desktop/ClawForHumanity/hos-resolve/install/mycobot_description/share/mycobot_description/urdf/mycobot_320_pi_2022/link5.dae"/>
			</geometry>
			<origin xyz = "0.0 0.0 -0.05 " rpy = " 0  0 -1.5708"/>
		</visual>
		<collision>
			<origin xyz = "0.0 0.0 -0.05 " rpy = " 0  0 -1.5708"/>
			<geometry>
				<cylinder length="0.0849" radius="0.029"/>
			</geometry>
		</collision>
	</link>

	<link name="link6">
		<inertial>
			<origin xyz="0 0 0.0" rpy="0 0 0"/>
		  	<mass value="0.0739"/>
			<inertia
			  ixx="0.00006649" ixy="0.0" ixz="0.0"
			  iyy="0.00006649" iyz="0.0"
			  izz="0.000096"/>
		</inertial>
		<visual>
			<geometry>
				<mesh filename="/home/cfh/Desktop/ClawForHumanity/hos-resolve/install/mycobot_description/share/mycobot_description/urdf/mycobot_320_pi_2022/link6.dae"/>
			</geometry>
			<material name = "grey">
				<color rgba = "0.5 0.5 0.5 1"/>
			</material>
				<origin xyz = "0.0 0.0 -0.022 " rpy = " 1.5708 1.5708 0"/>
		</visual>
		<collision>
			<origin xyz = "0.0 0.0 -0.022 " rpy = " 1.5708 1.5708 0"/>
			<geometry>
				<cylinder length="0.0225" radius="0.026"/>
		</geometry>
		</collision>
	</link>

    <!-- ********** COLORS ********** -->
    <gazebo reference="base">
        <material>Gazebo/Grey</material>
    </gazebo>
    <gazebo reference="link1">
        <material>Gazebo/White</material>
    </gazebo>
    <gazebo reference="link2">
        <material>Gazebo/White</material>
    </gazebo>
    <gazebo reference="link3">
        <material>Gazebo/White</material>
    </gazebo>
    <gazebo reference="link4">
        <material>Gazebo/White</material>
    </gazebo>
    <gazebo reference="link5">
        <material>Gazebo/White</material>
    </gazebo>
    <gazebo reference="link6">
        <material>Gazebo/White</material>
    </gazebo>
  
	<!-- ********** JOINTS ********** -->
	
	<!-- Attach the robot base to the world frame with no initial offset or rotation. -->
	<joint name="virtual_joint" type="fixed">
		<parent link="world"/>
		<child link="base"/>
		<origin xyz= "0 0 0" rpy = "0 0 0"/>  
	</joint>
	

	<joint name="joint2_to_joint1" type="revolute">
		<axis xyz="0 0 1"/>
		<limit effort = "${effort}" lower = "-2.96" upper = "2.96" velocity = "${velocity}"/>
		<parent link="base"/>
		<child link="link1"/>
		<origin xyz= "0 0 0.173" rpy = "0 0 0"/>  
        <dynamics damping="12.0" friction="6.0"/>
	</joint>

	<joint name="joint3_to_joint2" type="revolute">
		<axis xyz="0 0 1"/>
		<limit effort = "${effort}" lower = "-2.79" upper = "2.79" velocity = "${velocity}"/>
		<parent link="link1"/>
		<child link="link2"/>
		<origin xyz= "0 -0.086 0" rpy = "0 -1.57080  1.57080"/>  
        <dynamics damping="12.0" friction="6.0"/>
	</joint>

	<joint name="joint4_to_joint3" type="revolute">
		<axis xyz=" 0 0 1"/>
		<limit effort = "${effort}" lower = "-2.79" upper = "2.79" velocity = "${velocity}"/>
		<parent link="link2"/>
		<child link="link3"/>
		<origin xyz= "0.13635 0 -0.086   " rpy = "0 0 0"/>
        <dynamics damping="12.0" friction="6.0"/>
	</joint>

	<joint name="joint5_to_joint4" type="revolute">
		<axis xyz=" 0 0 1"/>
		<limit effort = "${effort}" lower = "-2.79" upper = "2.79" velocity = "${velocity}"/>
		<parent link="link3"/>
		<child link="link4"/>
    	<origin xyz= "0.1195 0  0.082" rpy = "0 0 1.57080"/>
        <dynamics damping="12.0" friction="6.0"/>
	</joint>

	<joint name="joint6_to_joint5" type="revolute">
		<axis xyz=" 0 0 1"/>
		<limit effort = "${effort}" lower = "-2.96" upper = "2.96" velocity = "${velocity}"/>
		<parent link="link4"/>
		<child link="link5"/>
    	<origin xyz= "0 -0.09415 0" rpy = "1.57080 0 0"/>
        <dynamics damping="7.0" friction="4.0"/>
	</joint>

	<joint name="joint6output_to_joint6" type="revolute">
		<axis xyz=" 0 0 1"/>
		<limit effort = "${effort}" lower = "-3.05" upper = "3.05" velocity = "${velocity}"/>
		<parent link="link5"/>
		<child link="link6"/>
    	<origin xyz= "0 0.055 0" rpy = "-1.57080 0 0 "/>
        <dynamics damping="3.0" friction="3.0"/>
	</joint>
	
	<!-- The mimic element means this joint will follow the movements of the 
		gripper_controller joint. 
	-->


	<!-- ********** PLUGINS ********** -->
    <!-- Publishes joint state information for the model which the robot_state_publisher uses to broadcast to 
            the tf topic, the topic that keeps track of the robot's multiple coordinate frames over time -->
    <gazebo>
        <plugin name="gazebo_ros_joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
            <update_rate>20</update_rate>
            <joint_name>joint2_to_joint1</joint_name>
            <joint_name>joint3_to_joint2</joint_name>
            <joint_name>joint4_to_joint3</joint_name>
            <joint_name>joint5_to_joint4</joint_name>
            <joint_name>joint6_to_joint5</joint_name>
            <joint_name>joint6output_to_joint6</joint_name>
        </plugin>
    </gazebo>

    <!-- Subscribes to a JointTrajectory message from the /set_joint_trajectory topic 
        To publish to this topic type: 
            ros2 topic pub -1 /set_joint_trajectory trajectory_msgs/msg/JointTrajectory "{header: {frame_id: base_link}, joint_names: [link1_to_link2, link2_to_link3, etc.], points: [{positions: [0.0,0.0,etc.]}]}" 
    -->
    <gazebo>
        <plugin name="gazebo_ros_joint_pose_trajectory" filename="libgazebo_ros_joint_pose_trajectory.so">
            <update_rate>20</update_rate>
        </plugin>
    </gazebo>

</robot>